version: "3.8"
services:
  pgvector:
    image: pgvector/pgvector:pg17
    container_name: pgvector-container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgvector-data:/var/lib/postgresql/data
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - pgvector
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_COLLECTION_NAME=${DB_COLLECTION_NAME}
      - CHUNK_TOKEN_LIMIT=${CHUNK_TOKEN_LIMIT}
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
      target: production
    depends_on:
      - redis
      - api
      - pgvector
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_QUEUE=${REDIS_QUEUE}
    volumes:
      - ./uploads:/app/uploads
    deploy:
      replicas: 1

volumes:
  redis-data:
  pgvector-data: